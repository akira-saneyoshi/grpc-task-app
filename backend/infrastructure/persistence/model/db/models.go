// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type TasksStatus string

const (
	TasksStatusPending    TasksStatus = "pending"
	TasksStatusInProgress TasksStatus = "in_progress"
	TasksStatusCompleted  TasksStatus = "completed"
)

func (e *TasksStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TasksStatus(s)
	case string:
		*e = TasksStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for TasksStatus: %T", src)
	}
	return nil
}

type NullTasksStatus struct {
	TasksStatus TasksStatus
	Valid       bool // Valid is true if TasksStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTasksStatus) Scan(value interface{}) error {
	if value == nil {
		ns.TasksStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TasksStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTasksStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TasksStatus), nil
}

type Task struct {
	ID          string
	UserID      string
	Title       string
	Description sql.NullString
	Status      NullTasksStatus
	DueDate     sql.NullTime
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
}

type User struct {
	ID        string
	Name      string
	Email     string
	Password  string
	IsActive  bool
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}
