// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query_tasks.sql

package db

import (
	"context"
	"database/sql"
)

const createTask = `-- name: CreateTask :exec
INSERT INTO tasks(id, user_id, title, description, status, due_date, created_at, updated_at)
VALUES(?, ?, ?, ?, ?, ?, NOW(), NOW())
`

type CreateTaskParams struct {
	ID          string
	UserID      string
	Title       string
	Description sql.NullString
	Status      NullTasksStatus
	DueDate     sql.NullTime
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) error {
	_, err := q.db.ExecContext(ctx, createTask,
		arg.ID,
		arg.UserID,
		arg.Title,
		arg.Description,
		arg.Status,
		arg.DueDate,
	)
	return err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks
WHERE id = ?
`

func (q *Queries) DeleteTask(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const findTaskByID = `-- name: FindTaskByID :one

SELECT id, user_id, title, description, status, due_date, created_at, updated_at
FROM tasks
WHERE id = ?
LIMIT 1
`

// query_tasks.sql
func (q *Queries) FindTaskByID(ctx context.Context, id string) (Task, error) {
	row := q.db.QueryRowContext(ctx, findTaskByID, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.DueDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findTasksByUserID = `-- name: FindTasksByUserID :many
SELECT id, user_id, title, description, status, due_date, created_at, updated_at
FROM tasks
WHERE user_id = ?
ORDER BY updated_at DESC
`

func (q *Queries) FindTasksByUserID(ctx context.Context, userID string) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, findTasksByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.DueDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLastInsertID = `-- name: GetLastInsertID :one
SELECT LAST_INSERT_ID()
`

func (q *Queries) GetLastInsertID(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getLastInsertID)
	var last_insert_id int64
	err := row.Scan(&last_insert_id)
	return last_insert_id, err
}

const updateTask = `-- name: UpdateTask :exec
UPDATE tasks
SET title = ?, description = ?, status = ?, due_date = ?, updated_at = NOW()
WHERE id = ?
`

type UpdateTaskParams struct {
	Title       string
	Description sql.NullString
	Status      NullTasksStatus
	DueDate     sql.NullTime
	ID          string
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) error {
	_, err := q.db.ExecContext(ctx, updateTask,
		arg.Title,
		arg.Description,
		arg.Status,
		arg.DueDate,
		arg.ID,
	)
	return err
}
